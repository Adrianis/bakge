Contributions -- They are important! How can you contribute? The best way is
to hit up the Issues page at http://github.com/palistov/bakge/issues and look
for any problems you'd like to fix. Then continue below to get started.
You can also help by just testing things out and finding bugs. If you find a
bug, create an issue for it with a description. Anything helps!

And if that doesn't tickle your fancy, check out the DESIGN document to get
links to pages about the design of Bakge. If you have any ideas, run them
by me through e-mail or create an issue with a description of your suggestion.


Create Your Fork of Bakge
=========================

First, go to the palistov/bakge repo page and click 'Fork' at the top right.
This creates your own Bakge repository on your Github account that you can
freely work on without having to worry about fuddling up the origin.

Clone the repo and do some configuration with
 $ git clone https://github.com/<your_username>/bakge
 $ cd bakge
 $ git diff --patience
 $ git remote add palistov http://github.com/palistov/bakge

git diff --patience activates a cleaner diff algorithm, for cleaner commit
diffs. The last command adds the origin repo so you can pull changes from it.


Building Your Solution
======================

When you want to add your changes, it's best to create a new branch on your
forked repo. This way you can build your changes only on that branch, and
send a pull request with that branch to the origin repo. Once your request
is merged, you can then swap back to your forked repo's master branch and
merge changes from the origin repo's master branch. This way your master
branch doesn't get all jumbled up with changes that might not even be sent
to the master repository.

Create a new branch to work on with
 $ git checkout -b <your_username>_<branch_name> # e.g. palistov_window

Commit and push your changes to your fork with
 $ git commit -am "<A short description>"
 $ git push origin <your_usrename>_<branch_name>


Be sure that you add any unit test files you use so that others can test your
changes as well. This is important -- if we can't easily test your changes
then we can't be sure the change won't break anything!

Add new files with
 $ git add <file_name> # To add new files to the repository


Send A Pull Request
===================

Now comes the fun part. Go to the palistov/bakge repository page and click
'Pull Request' at the top right. On the right, select your contribution
branch (the one you created to build your solution on), and select
palistov/contribution on the left. Put a short description of your changes
so we can know what you're trying to do. If the code withstands initial
scrutiny the change will be merged into the contribution branch, where it
will undergo testing. Then if all is well, it will be merged into the master
branch. Once you do your successful-pull-request victory dance, run this
command to merge the new changes into your master branch. Important note: You
can still commit more changes to the branch after sending the pull request,
and they will be applied. So if you discover a bug in your code after sending
the request, no worries! The same goes for if your request doesn't initially
pass. Don't worry! Just keep adding changes until it gets merged or closed.


After The Pull Request
======================

Once your change has been merged into the origin repo's master branch, you'll
want to update your own fork's master branch as well.

Pull origin repo's changes with
 $ git checkout master # Get onto your master branch
 $ git pull palistov master # Pull changes


Make sure you run this after your changes have been merged into the
palistov/master branch. The contribution branch is where contributions are
tested before being finalized and merged into master.


Rinse and repeat
================

You can delete the old branch if you'd like. Make sure you create a new branch
off of your master branch for any new changes! Don't forget to add your name
to the AUTHORS file if this is your first contribution!

